#!/bin/sh
# 
# SETUP:
# 1. ADD SUBTREE LOGS
# cd /project/.git/logs
# touch subtree
# 
# 2. ADD SUBTREE LOG FUNCTION TO GIT CORE
# cd /Applications/SourceTree.app/Contents/Resources/git_local/libexec/git-core
# vim git-subtree
# add the following before "git push "$repository" "$localrev":"refs/heads/$refspec""
# ---------
#
#   # START HACK - Dieskim subtree loggin hack
#   subtreepushresult=$((git push --dry-run "$repository" "$localrev":"refs/heads/$refspec") 2>&1)
#
#   if [[ $subtreepushresult != *"rejected"* ]] && [[ $subtreepushresult != *"failed"* ]]; then
#   
#           pushdate=`date +%a" "%b" "%d" "%H:%M:%S" "%Y" "%z`
#           echo "Pushed subtree $prefix commit: $localrev Date: $pushdate" >> $GIT_DIR/logs/subtree
#
#   fi
#   # END - HACK
# 
# ---------
# USAGE:
# To Check Status:
# sh git_subtree check
# 
# To force push:
# sh git_subtree forcepush app/lib/pushNotifications
check (){

    GREEN='\033[0;32m';
    RED='\033[0;31m';
    NC='\033[0m';

    #Start output
    echo "=================================";
    echo "----- Subtree Check Started -----";
    echo "=================================";

    #set sourcetreeconfig
    sourcetreeconfig='./.git/sourcetreeconfig';

    #set subtreeprefix
    subtree=$1;

    # get subtreenumber 
    subtreenumber=`grep $subtree $sourcetreeconfig | cut -d . -f 1`;

    #get path (repo url)
    path=`grep $subtreenumber.path $sourcetreeconfig | cut -d = -f 2`;

    #get prefix (local dir)
    subtreeprefix=`grep $subtreenumber.prefix $sourcetreeconfig | cut -d = -f 2`;

    # get last push commit log
    lastpushcommitlog=`cat ./.git/logs/subtree | grep $subtreeprefix | tail -n 1`;

    # get lastpushcommit date
    lastpushcommitdate=`echo $lastpushcommitlog | awk -F 'Date: ' '{print $2}'`;

     # look for the last push commit
    lastpushcommit=`echo $lastpushcommitlog | awk -F 'commit: ' '{print $2}' | awk -F 'Date: ' '{print $1}' | cut -c1-8`;

    # look for the last pull commit
    lastpullcommit=`git log --grep "Squashed '$subtreeprefix/'" --oneline | awk -F "'$subtreeprefix/'" '{print $2}' | sed '/^$/d' | head -n 1 | awk '{ print $NF }' | cut -d . -f 3 | cut -c1-8`;

    # look for last parent commit with changes to this subtree
    lastparentchangecommitdate=`git log --format=%cd --diff-filter=ACDMRTUXB $subtreeprefix | head -n 1`

    #get remotecommit
    remotecommit=`git ls-remote $path | head -1 | cut -f 1 | cut -c1-8`

    #set subtree name
    subtreename=`echo $subtreeprefix | cut -d / -f 3`

    echo "Subtree: $subtreename";

    if [[ $remotecommit == $lastpullcommit || $remotecommit == $lastpushcommit ]]; then
            
        # START IF lastparentchangecommitdate not set then set lastparentchangecommitdateseconds first ever date
        if [ -z "$lastparentchangecommitdate" ]; then 
            lastparentchangecommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "Thu Jan 1 00:00:00 1970 +0000" "+%s");    
        else 
            lastparentchangecommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "${lastparentchangecommitdate}" "+%s");
        fi 
        # END IF lastparentchangecommitdate not set then set lastparentchangecommitdateseconds first ever date

        # set lastpushcommitdateseconds
        lastpushcommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "${lastpushcommitdate}" "+%s");

        if [ $lastpushcommitdateseconds -ge $lastparentchangecommitdateseconds ]; then

            echo "${GREEN}Everything up-to-date!${NC}";

            echo "lastparentchangecommitdate: $lastparentchangecommitdate"
            echo "lastpushcommitdate: $lastpushcommitdate"; 
            echo "lastpushcommit: $lastpushcommit";
            echo "lastpullcommit: $lastpullcommit";
            echo "remotecommit: $remotecommit ";

        else

            echo "${RED}Subtree has changes not pushed - Push Needed!${NC}";

            echo "lastparentchangecommitdate: $lastparentchangecommitdate"
            echo "lastpushcommitdate: $lastpushcommitdate"; 
            echo "lastpushcommit: $lastpushcommit";
            echo "lastpullcommit: $lastpullcommit";
            echo "remotecommit: $remotecommit ";

        fi     

    else
        
        echo "${RED}Update Needed!${NC}";

        echo "lastparentchangecommitdate: $lastparentchangecommitdate"
        echo "lastpushcommitdate: $lastpushcommitdate"; 
        echo "lastpushcommit: $lastpushcommit";
        echo "lastpullcommit: $lastpullcommit";
        echo "remotecommit: $remotecommit ";

    fi
      
    echo "==========================";

}   
checkall (){

    GREEN='\033[0;32m';
    RED='\033[0;31m';
    NC='\033[0m';

    #Start output
    echo "=================================";
    echo "---Subtree Check All Started---";
    echo "=================================";

    #set sourcetreeconfig
    sourcetreeconfig='./.git/sourcetreeconfig';

    for subtreeprefix in `grep 'prefix' $sourcetreeconfig | cut -d = -f 2 | sort`; do

        subtreenumber=`grep $subtreeprefix $sourcetreeconfig | cut -d . -f 1`;

        #get prefix (local dir)
        prefix=`grep $subtreenumber.prefix $sourcetreeconfig | cut -d = -f 2`;
        
        #get path (repo url)
        path=`grep $subtreenumber.path $sourcetreeconfig | cut -d = -f 2`;
            
        # get last push commit log
        lastpushcommitlog=`cat ./.git/logs/subtree | grep $prefix | tail -n 1`;

        # get lastpushcommit date
        lastpushcommitdate=`echo $lastpushcommitlog | awk -F 'Date: ' '{print $2}'`;

        # look for the last push commit
        lastpushcommit=`echo $lastpushcommitlog | awk -F 'commit: ' '{print $2}' | awk -F 'Date: ' '{print $1}' | cut -c1-8`;

        # look for the last pull commit
        lastpullcommit=`git log --grep "Squashed '$prefix/'" --oneline | awk -F "'$prefix/'" '{print $2}' | sed '/^$/d' | head -n 1 | awk '{ print $NF }' | cut -d . -f 3 | cut -c1-8`;

        # look for last parent commit with changes to this subtree
        lastparentchangecommitdate=`git log --format=%cd --diff-filter=ACDMRTUXB $prefix | head -n 1`

        #get remotecommit
        remotecommit=`git ls-remote $path | head -1 | cut -f 1 | cut -c1-8`

        #set subtree name
        subtreename=`echo $prefix | cut -d / -f 3`

        echo "Subtree: $subtreename";

        if [[ $remotecommit == $lastpullcommit || $remotecommit == $lastpushcommit ]]; then
            
            # START IF lastparentchangecommitdate not set then set lastparentchangecommitdateseconds first ever date
            if [ -z "$lastparentchangecommitdate" ]; then 
                lastparentchangecommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "Thu Jan 1 00:00:00 1970 +0000" "+%s");    
            else 
                lastparentchangecommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "${lastparentchangecommitdate}" "+%s");
            fi 
            # END IF lastparentchangecommitdate not set then set lastparentchangecommitdateseconds first ever date

            # set lastpushcommitdateseconds
            lastpushcommitdateseconds=$(date -j -f "%a %b %d %T %Y %z" "${lastpushcommitdate}" "+%s");

            if [ $lastpushcommitdateseconds -ge $lastparentchangecommitdateseconds ]; then

                echo "${GREEN}Everything up-to-date!${NC}";

                echo "lastparentchangecommitdate: $lastparentchangecommitdate"
                echo "lastpushcommitdate: $lastpushcommitdate"; 
                echo "lastpushcommit: $lastpushcommit";
                echo "lastpullcommit: $lastpullcommit";
                echo "remotecommit: $remotecommit ";

            else

                echo "${RED}Subtree has changes not pushed - Push Needed!${NC}";

                echo "lastparentchangecommitdate: $lastparentchangecommitdate"
                echo "lastpushcommitdate: $lastpushcommitdate"; 
                echo "lastpushcommit: $lastpushcommit";
                echo "lastpullcommit: $lastpullcommit";
                echo "remotecommit: $remotecommit ";

            fi     

        else
            
            echo "${RED}Update Needed!${NC}";

            echo "lastparentchangecommitdate: $lastparentchangecommitdate"
            echo "lastpushcommitdate: $lastpushcommitdate"; 
            echo "lastpushcommit: $lastpushcommit";
            echo "lastpullcommit: $lastpullcommit";
            echo "remotecommit: $remotecommit ";

        fi
          
        echo "==========================";

    done

}
push(){
    
    echo "==== PUSH STARTED ====";
    echo "Subtree: $1";

    #set sourcetreeconfig
    sourcetreeconfig='./.git/sourcetreeconfig';

    #set subtreeprefix
    subtree=$1;

    # get subtreenumber 
    subtreenumber=`grep $subtree $sourcetreeconfig | cut -d . -f 1`;

    #get path (repo url)
    path=`grep $subtreenumber.path $sourcetreeconfig | cut -d = -f 2`;

    #get prefix (local dir)
    subtreeprefix=`grep $subtreenumber.prefix $sourcetreeconfig | cut -d = -f 2`;

    echo "Remote: $path";

    git -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree subtree push -P $subtreeprefix $path master

}
pull(){

    echo "==== PULL STARTED ====";
    echo "Subtree: $1";

    #set sourcetreeconfig
    sourcetreeconfig='./.git/sourcetreeconfig';

    #set subtreeprefix
    subtree=$1;

    # get subtreenumber 
    subtreenumber=`grep $subtree $sourcetreeconfig | cut -d . -f 1`;

    #get path (repo url)
    path=`grep $subtreenumber.path $sourcetreeconfig | cut -d = -f 2`;

    #get prefix (local dir)
    subtreeprefix=`grep $subtreenumber.prefix $sourcetreeconfig | cut -d = -f 2`;

    echo "Remote: $path";

    git -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree subtree pull -P $subtreeprefix --squash $path master 

}
forcepush(){

    echo "==== FORCE PUSH STARTED ====";
    echo "Subtree: $1";

    #set sourcetreeconfig
    sourcetreeconfig='./.git/sourcetreeconfig';

    #set subtreeprefix
    subtree=$1;

    # get subtreenumber 
    subtreenumber=`grep $subtree $sourcetreeconfig | cut -d . -f 1`;

    #get path (repo url)
    path=`grep $subtreenumber.path $sourcetreeconfig | cut -d = -f 2`;

    #get prefix (local dir)
    subtreeprefix=`grep $subtreenumber.prefix $sourcetreeconfig | cut -d = -f 2`;

    echo "Remote: $path";

    # TO FORCE PUSH WHEN IT WONT PUSH:
    # 1. CD TO APP DIR THEN RUN:
    # git subtree split --prefix app/lib/alertFormOpenClose -b push-force-split
    # 2. RUN PUSH FORCETO (CHANGE DEST URL)
    # git push -f https://dieskim_skim@bitbucket.org/boxwork/alertformopenclose.git push-force-split:master
    # 3. DELETE NEW BRANCH ON APP REPO
    # git branch -D gh-pages
    # 
    
    # split subtree
    git subtree split --prefix $subtreeprefix -b push-force-split;

    # push to subtree master
    git push -f $path push-force-split:master;

    # delete branch
    git branch -D push-force-split;

}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
    # call arguments verbatim
    "$@"
else
    # Show a helpful error
    echo "Unknown Function";
    echo "Please spesify a Valid Function:" >&2
    echo "-------------------------"
    echo "To Check Status:";
    echo "sh git_subtree check pushNotifications";
    echo "-------------------------"
    echo "To Check Status:";
    echo "sh git_subtree checkall";
    echo "-------------------------"
    echo "To push:";
    echo "sh git_subtree push pushNotifications";
    echo "-------------------------"
    echo "To pull:";
    echo "sh git_subtree pull pushNotifications";
    echo "-------------------------"
    echo "To force push:";
    echo "sh git_subtree forcepush pushNotifications";
    echo "-------------------------"

  exit 1
fi